/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TokenizationService } from "../tokenization.service";
import { TokenizationCreateInput } from "./TokenizationCreateInput";
import { Tokenization } from "./Tokenization";
import { TokenizationFindManyArgs } from "./TokenizationFindManyArgs";
import { TokenizationWhereUniqueInput } from "./TokenizationWhereUniqueInput";
import { TokenizationUpdateInput } from "./TokenizationUpdateInput";

export class TokenizationControllerBase {
  constructor(protected readonly service: TokenizationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tokenization })
  async createTokenization(
    @common.Body() data: TokenizationCreateInput
  ): Promise<Tokenization> {
    return await this.service.createTokenization({
      data: {
        ...data,

        model: data.model
          ? {
              connect: data.model,
            }
          : undefined,
      },
      select: {
        accessToken: true,
        createdAt: true,
        id: true,

        model: {
          select: {
            id: true,
          },
        },

        tokenizationName: true,
        tokenizationType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tokenization] })
  @ApiNestedQuery(TokenizationFindManyArgs)
  async tokenizations(@common.Req() request: Request): Promise<Tokenization[]> {
    const args = plainToClass(TokenizationFindManyArgs, request.query);
    return this.service.tokenizations({
      ...args,
      select: {
        accessToken: true,
        createdAt: true,
        id: true,

        model: {
          select: {
            id: true,
          },
        },

        tokenizationName: true,
        tokenizationType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tokenization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tokenization(
    @common.Param() params: TokenizationWhereUniqueInput
  ): Promise<Tokenization | null> {
    const result = await this.service.tokenization({
      where: params,
      select: {
        accessToken: true,
        createdAt: true,
        id: true,

        model: {
          select: {
            id: true,
          },
        },

        tokenizationName: true,
        tokenizationType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tokenization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTokenization(
    @common.Param() params: TokenizationWhereUniqueInput,
    @common.Body() data: TokenizationUpdateInput
  ): Promise<Tokenization | null> {
    try {
      return await this.service.updateTokenization({
        where: params,
        data: {
          ...data,

          model: data.model
            ? {
                connect: data.model,
              }
            : undefined,
        },
        select: {
          accessToken: true,
          createdAt: true,
          id: true,

          model: {
            select: {
              id: true,
            },
          },

          tokenizationName: true,
          tokenizationType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tokenization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTokenization(
    @common.Param() params: TokenizationWhereUniqueInput
  ): Promise<Tokenization | null> {
    try {
      return await this.service.deleteTokenization({
        where: params,
        select: {
          accessToken: true,
          createdAt: true,
          id: true,

          model: {
            select: {
              id: true,
            },
          },

          tokenizationName: true,
          tokenizationType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
