/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Tokenization as PrismaTokenization,
  Model as PrismaModel,
} from "@prisma/client";

export class TokenizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TokenizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tokenization.count(args);
  }

  async tokenizations<T extends Prisma.TokenizationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TokenizationFindManyArgs>
  ): Promise<PrismaTokenization[]> {
    return this.prisma.tokenization.findMany<Prisma.TokenizationFindManyArgs>(
      args
    );
  }
  async tokenization<T extends Prisma.TokenizationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TokenizationFindUniqueArgs>
  ): Promise<PrismaTokenization | null> {
    return this.prisma.tokenization.findUnique(args);
  }
  async createTokenization<T extends Prisma.TokenizationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TokenizationCreateArgs>
  ): Promise<PrismaTokenization> {
    return this.prisma.tokenization.create<T>(args);
  }
  async updateTokenization<T extends Prisma.TokenizationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TokenizationUpdateArgs>
  ): Promise<PrismaTokenization> {
    return this.prisma.tokenization.update<T>(args);
  }
  async deleteTokenization<T extends Prisma.TokenizationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TokenizationDeleteArgs>
  ): Promise<PrismaTokenization> {
    return this.prisma.tokenization.delete(args);
  }

  async getModel(parentId: string): Promise<PrismaModel | null> {
    return this.prisma.tokenization
      .findUnique({
        where: { id: parentId },
      })
      .model();
  }
}
