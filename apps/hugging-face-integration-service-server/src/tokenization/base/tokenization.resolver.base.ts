/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Tokenization } from "./Tokenization";
import { TokenizationCountArgs } from "./TokenizationCountArgs";
import { TokenizationFindManyArgs } from "./TokenizationFindManyArgs";
import { TokenizationFindUniqueArgs } from "./TokenizationFindUniqueArgs";
import { CreateTokenizationArgs } from "./CreateTokenizationArgs";
import { UpdateTokenizationArgs } from "./UpdateTokenizationArgs";
import { DeleteTokenizationArgs } from "./DeleteTokenizationArgs";
import { Model } from "../../model/base/Model";
import { TokenizationService } from "../tokenization.service";
@graphql.Resolver(() => Tokenization)
export class TokenizationResolverBase {
  constructor(protected readonly service: TokenizationService) {}

  async _tokenizationsMeta(
    @graphql.Args() args: TokenizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Tokenization])
  async tokenizations(
    @graphql.Args() args: TokenizationFindManyArgs
  ): Promise<Tokenization[]> {
    return this.service.tokenizations(args);
  }

  @graphql.Query(() => Tokenization, { nullable: true })
  async tokenization(
    @graphql.Args() args: TokenizationFindUniqueArgs
  ): Promise<Tokenization | null> {
    const result = await this.service.tokenization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Tokenization)
  async createTokenization(
    @graphql.Args() args: CreateTokenizationArgs
  ): Promise<Tokenization> {
    return await this.service.createTokenization({
      ...args,
      data: {
        ...args.data,

        model: args.data.model
          ? {
              connect: args.data.model,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Tokenization)
  async updateTokenization(
    @graphql.Args() args: UpdateTokenizationArgs
  ): Promise<Tokenization | null> {
    try {
      return await this.service.updateTokenization({
        ...args,
        data: {
          ...args.data,

          model: args.data.model
            ? {
                connect: args.data.model,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tokenization)
  async deleteTokenization(
    @graphql.Args() args: DeleteTokenizationArgs
  ): Promise<Tokenization | null> {
    try {
      return await this.service.deleteTokenization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Model, {
    nullable: true,
    name: "model",
  })
  async getModel(
    @graphql.Parent() parent: Tokenization
  ): Promise<Model | null> {
    const result = await this.service.getModel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
