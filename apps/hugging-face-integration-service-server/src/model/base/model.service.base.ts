/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Model as PrismaModel,
  Tokenization as PrismaTokenization,
} from "@prisma/client";

export class ModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ModelCountArgs, "select">): Promise<number> {
    return this.prisma.model.count(args);
  }

  async models<T extends Prisma.ModelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelFindManyArgs>
  ): Promise<PrismaModel[]> {
    return this.prisma.model.findMany<Prisma.ModelFindManyArgs>(args);
  }
  async model<T extends Prisma.ModelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelFindUniqueArgs>
  ): Promise<PrismaModel | null> {
    return this.prisma.model.findUnique(args);
  }
  async createModel<T extends Prisma.ModelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelCreateArgs>
  ): Promise<PrismaModel> {
    return this.prisma.model.create<T>(args);
  }
  async updateModel<T extends Prisma.ModelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelUpdateArgs>
  ): Promise<PrismaModel> {
    return this.prisma.model.update<T>(args);
  }
  async deleteModel<T extends Prisma.ModelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModelDeleteArgs>
  ): Promise<PrismaModel> {
    return this.prisma.model.delete(args);
  }

  async findTokenizations(
    parentId: string,
    args: Prisma.TokenizationFindManyArgs
  ): Promise<PrismaTokenization[]> {
    return this.prisma.model
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tokenizations(args);
  }
}
